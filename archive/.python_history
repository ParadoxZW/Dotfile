from transformers import BertModel
x = BertModel.from_pretrained('bert-large-cased')
from transformers import BertTokenizer
x = BertTokenizer.from_pretrained('bert-large-cased')
from transformers import BertModel
from transformers import BertTokenizer
from transformers import BertModel
x = BertModel.from_pretrained('albert-xxlarge-v2')
from transformers import AlertModel
from transformers import AlbertModel
x = AlbertModel.from_pretrained('albert-xxlarge-v2')
from transformers import AlbertTokenizer
x = AlbertTokenizer.from_pretrained('albert-xxlarge-v2')
x = AlbertModel.from_pretrained('albert-xxlarge-v2')
import torch
torch.cuda.is_available
torch.cuda.is_available()
import captioning
import torch
torch.__version__
import torch
torch.__version__
import torch
torch.__version__
import torch
torch.__version__
import torch
torch.__version__
import torch
torch.load('vqa.pkl')
ckpt = torch.load('vqa.pkl')
for x in ckpt:
    print(x)
del ckpt['net_optim']
del ckpt['epoch']
for x in ckpt:
    print(x)
torch.save('vqa.pkl', ckpt)
torch.save(ckpt, 'vqa.pkl')
import ssl
ssl._create_default_https_context
import numpy as np
x = np.load('COCO_train2014_000000091171.npz')
type(x)
x['y'].shape
x['feats'].shape
x['feat'].shape
x['mask'].shape
x = np.loadz('COCO_train2014_000000091171.npz')
x['feat'].shape
x['mask'].shape
x.mask.shape
x['arr_0'].shape
x['arr_0']
import numpy as np
x = np.load('COCO_train2014_000000091171.npz')
x['mask'].shape
x['feat'].shape
x['feats'].shape
import numpy as np
x = np.load('train2014/100012.npz')
x
for i in x
for i in x:
    print(i)
x['x']
x['x'].shape
x = np.load('train2014/100013.npz')
19 * 25
import torch
import torch.nn,functional as F
import torch.nn.functional as F
import numpy as np
x = np.zeros((24, 32))
x = np.zeros((5, 8))
x[:2, :6] = 1
x
x[:3, :6] = 1
x
x = torch.BoolTensor(x)
x
x[None]
x[None].float()
F.interpolate(x[None].float(), size=(3, 4))
F.interpolate(x.float(), size=(3, 4))
F.interpolate(x[None].float(), size=(3, 4))
F.interpolate(x[None, None].float(), size=(3, 4))
import torch
import numpy
import torch
ckpt = torch.load('vqa-pxy01-2path-0001-full_epoch10.pkl')
for i in x:
    print(i)
for i in ckpt:
    print(i)
net = ckpt['state_dict']
net
len(net)
for i in net:
    print(type(i))
for i in net:
    print(i)
for i in net:
    print(i, net[i].shape)
for i in net:
    print(i,' | ',  net[i].shape)
torch.save_state_dict('1.pkl', net)
torch.save_statedict('1.pkl', net)
torch.save('1.pkl', net)
torch.save(net, '1.pkl')
import torch
from torch import nn
net = nn.Transformer()
net
nn.Transformer?
?nn.Transformer
? nn.Transformer
help(nn.Transformer)
import torch
x = torch.rand(3)
x
x, i = torch.sort(x)
i
import _ctypes
from _ctypes import Union, Structure, Array
import ctypes
import torch
import os
import sys
sys.version
import random
import math
import numpy as np
x = np.load("vqa-pxy01-evo-ops-0002-search.npy")
type(x)
x
